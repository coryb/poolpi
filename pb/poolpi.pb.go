// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: pb/poolpi.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Key int32

const (
	Key_None    Key = 0
	Key_Right   Key = 1
	Key_Menu    Key = 2
	Key_Left    Key = 3
	Key_Service Key = 4
	Key_Minus   Key = 5
	Key_Plus    Key = 6
	Key_PoolSpa Key = 7
	Key_Filter  Key = 8
	Key_Lights  Key = 9
	Key_Aux1    Key = 10
	Key_Aux2    Key = 11
	Key_Aux3    Key = 12
	Key_Aux4    Key = 13
	Key_Aux5    Key = 14
	Key_Aux6    Key = 15
	Key_Aux7    Key = 16
	Key_Valve3  Key = 17
	Key_Valve4  Key = 18
	Key_Heater  Key = 19
)

// Enum value maps for Key.
var (
	Key_name = map[int32]string{
		0:  "None",
		1:  "Right",
		2:  "Menu",
		3:  "Left",
		4:  "Service",
		5:  "Minus",
		6:  "Plus",
		7:  "PoolSpa",
		8:  "Filter",
		9:  "Lights",
		10: "Aux1",
		11: "Aux2",
		12: "Aux3",
		13: "Aux4",
		14: "Aux5",
		15: "Aux6",
		16: "Aux7",
		17: "Valve3",
		18: "Valve4",
		19: "Heater",
	}
	Key_value = map[string]int32{
		"None":    0,
		"Right":   1,
		"Menu":    2,
		"Left":    3,
		"Service": 4,
		"Minus":   5,
		"Plus":    6,
		"PoolSpa": 7,
		"Filter":  8,
		"Lights":  9,
		"Aux1":    10,
		"Aux2":    11,
		"Aux3":    12,
		"Aux4":    13,
		"Aux5":    14,
		"Aux6":    15,
		"Aux7":    16,
		"Valve3":  17,
		"Valve4":  18,
		"Heater":  19,
	}
)

func (x Key) Enum() *Key {
	p := new(Key)
	*p = x
	return p
}

func (x Key) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Key) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_poolpi_proto_enumTypes[0].Descriptor()
}

func (Key) Type() protoreflect.EnumType {
	return &file_pb_poolpi_proto_enumTypes[0]
}

func (x Key) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Key.Descriptor instead.
func (Key) EnumDescriptor() ([]byte, []int) {
	return file_pb_poolpi_proto_rawDescGZIP(), []int{0}
}

type KeySource int32

const (
	KeySource_Remote   KeySource = 0
	KeySource_Local    KeySource = 1
	KeySource_Wireless KeySource = 2
)

// Enum value maps for KeySource.
var (
	KeySource_name = map[int32]string{
		0: "Remote",
		1: "Local",
		2: "Wireless",
	}
	KeySource_value = map[string]int32{
		"Remote":   0,
		"Local":    1,
		"Wireless": 2,
	}
)

func (x KeySource) Enum() *KeySource {
	p := new(KeySource)
	*p = x
	return p
}

func (x KeySource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeySource) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_poolpi_proto_enumTypes[1].Descriptor()
}

func (KeySource) Type() protoreflect.EnumType {
	return &file_pb_poolpi_proto_enumTypes[1]
}

func (x KeySource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeySource.Descriptor instead.
func (KeySource) EnumDescriptor() ([]byte, []int) {
	return file_pb_poolpi_proto_rawDescGZIP(), []int{1}
}

type KeyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    Key       `protobuf:"varint,1,opt,name=Key,proto3,enum=Key" json:"Key,omitempty"`
	Source KeySource `protobuf:"varint,2,opt,name=Source,proto3,enum=KeySource" json:"Source,omitempty"`
}

func (x *KeyEvent) Reset() {
	*x = KeyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_poolpi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyEvent) ProtoMessage() {}

func (x *KeyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_poolpi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyEvent.ProtoReflect.Descriptor instead.
func (*KeyEvent) Descriptor() ([]byte, []int) {
	return file_pb_poolpi_proto_rawDescGZIP(), []int{0}
}

func (x *KeyEvent) GetKey() Key {
	if x != nil {
		return x.Key
	}
	return Key_None
}

func (x *KeyEvent) GetSource() KeySource {
	if x != nil {
		return x.Source
	}
	return KeySource_Remote
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*Event_Unknown
	//	*Event_State
	//	*Event_Message
	//	*Event_PumpRequest
	//	*Event_PumpStatus
	//	*Event_StateUpdate
	//	*Event_MessageUpdate
	//	*Event_CurrentState
	//	*Event_Key
	Event isEvent_Event `protobuf_oneof:"Event"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_poolpi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_pb_poolpi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_pb_poolpi_proto_rawDescGZIP(), []int{1}
}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Event) GetUnknown() *UnknownEvent {
	if x, ok := x.GetEvent().(*Event_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *Event) GetState() *StateEvent {
	if x, ok := x.GetEvent().(*Event_State); ok {
		return x.State
	}
	return nil
}

func (x *Event) GetMessage() *MessageEvent {
	if x, ok := x.GetEvent().(*Event_Message); ok {
		return x.Message
	}
	return nil
}

func (x *Event) GetPumpRequest() *PumpRequestEvent {
	if x, ok := x.GetEvent().(*Event_PumpRequest); ok {
		return x.PumpRequest
	}
	return nil
}

func (x *Event) GetPumpStatus() *PumpStatusEvent {
	if x, ok := x.GetEvent().(*Event_PumpStatus); ok {
		return x.PumpStatus
	}
	return nil
}

func (x *Event) GetStateUpdate() *StateUpdateEvent {
	if x, ok := x.GetEvent().(*Event_StateUpdate); ok {
		return x.StateUpdate
	}
	return nil
}

func (x *Event) GetMessageUpdate() *MessageUpdateEvent {
	if x, ok := x.GetEvent().(*Event_MessageUpdate); ok {
		return x.MessageUpdate
	}
	return nil
}

func (x *Event) GetCurrentState() *CurrentStateEvent {
	if x, ok := x.GetEvent().(*Event_CurrentState); ok {
		return x.CurrentState
	}
	return nil
}

func (x *Event) GetKey() *KeyEvent {
	if x, ok := x.GetEvent().(*Event_Key); ok {
		return x.Key
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_Unknown struct {
	Unknown *UnknownEvent `protobuf:"bytes,1,opt,name=Unknown,proto3,oneof"`
}

type Event_State struct {
	State *StateEvent `protobuf:"bytes,2,opt,name=State,proto3,oneof"`
}

type Event_Message struct {
	Message *MessageEvent `protobuf:"bytes,3,opt,name=Message,proto3,oneof"`
}

type Event_PumpRequest struct {
	PumpRequest *PumpRequestEvent `protobuf:"bytes,4,opt,name=PumpRequest,proto3,oneof"`
}

type Event_PumpStatus struct {
	PumpStatus *PumpStatusEvent `protobuf:"bytes,5,opt,name=PumpStatus,proto3,oneof"`
}

type Event_StateUpdate struct {
	StateUpdate *StateUpdateEvent `protobuf:"bytes,6,opt,name=StateUpdate,proto3,oneof"`
}

type Event_MessageUpdate struct {
	MessageUpdate *MessageUpdateEvent `protobuf:"bytes,7,opt,name=MessageUpdate,proto3,oneof"`
}

type Event_CurrentState struct {
	CurrentState *CurrentStateEvent `protobuf:"bytes,8,opt,name=CurrentState,proto3,oneof"`
}

type Event_Key struct {
	Key *KeyEvent `protobuf:"bytes,9,opt,name=Key,proto3,oneof"`
}

func (*Event_Unknown) isEvent_Event() {}

func (*Event_State) isEvent_Event() {}

func (*Event_Message) isEvent_Event() {}

func (*Event_PumpRequest) isEvent_Event() {}

func (*Event_PumpStatus) isEvent_Event() {}

func (*Event_StateUpdate) isEvent_Event() {}

func (*Event_MessageUpdate) isEvent_Event() {}

func (*Event_CurrentState) isEvent_Event() {}

func (*Event_Key) isEvent_Event() {}

type StateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Heater1         *Indicator `protobuf:"bytes,1,opt,name=Heater1,proto3" json:"Heater1,omitempty"`
	Valve3          *Indicator `protobuf:"bytes,2,opt,name=Valve3,proto3" json:"Valve3,omitempty"`
	CheckSystem     *Indicator `protobuf:"bytes,3,opt,name=CheckSystem,proto3" json:"CheckSystem,omitempty"`
	Pool            *Indicator `protobuf:"bytes,4,opt,name=Pool,proto3" json:"Pool,omitempty"`
	Spa             *Indicator `protobuf:"bytes,5,opt,name=Spa,proto3" json:"Spa,omitempty"`
	Filter          *Indicator `protobuf:"bytes,6,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Lights          *Indicator `protobuf:"bytes,7,opt,name=Lights,proto3" json:"Lights,omitempty"`
	Aux1            *Indicator `protobuf:"bytes,8,opt,name=Aux1,proto3" json:"Aux1,omitempty"`
	Aux2            *Indicator `protobuf:"bytes,9,opt,name=Aux2,proto3" json:"Aux2,omitempty"`
	Service         *Indicator `protobuf:"bytes,10,opt,name=Service,proto3" json:"Service,omitempty"`
	Aux3            *Indicator `protobuf:"bytes,11,opt,name=Aux3,proto3" json:"Aux3,omitempty"`
	Aux4            *Indicator `protobuf:"bytes,12,opt,name=Aux4,proto3" json:"Aux4,omitempty"`
	Aux5            *Indicator `protobuf:"bytes,13,opt,name=Aux5,proto3" json:"Aux5,omitempty"`
	Aux6            *Indicator `protobuf:"bytes,14,opt,name=Aux6,proto3" json:"Aux6,omitempty"`
	Valve4          *Indicator `protobuf:"bytes,15,opt,name=Valve4,proto3" json:"Valve4,omitempty"`
	Spillover       *Indicator `protobuf:"bytes,16,opt,name=Spillover,proto3" json:"Spillover,omitempty"`
	SystemOff       *Indicator `protobuf:"bytes,17,opt,name=SystemOff,proto3" json:"SystemOff,omitempty"`
	Aux7            *Indicator `protobuf:"bytes,18,opt,name=Aux7,proto3" json:"Aux7,omitempty"`
	Aux8            *Indicator `protobuf:"bytes,19,opt,name=Aux8,proto3" json:"Aux8,omitempty"`
	Aux9            *Indicator `protobuf:"bytes,20,opt,name=Aux9,proto3" json:"Aux9,omitempty"`
	Aux10           *Indicator `protobuf:"bytes,21,opt,name=Aux10,proto3" json:"Aux10,omitempty"`
	Aux11           *Indicator `protobuf:"bytes,22,opt,name=Aux11,proto3" json:"Aux11,omitempty"`
	Aux12           *Indicator `protobuf:"bytes,23,opt,name=Aux12,proto3" json:"Aux12,omitempty"`
	Aux13           *Indicator `protobuf:"bytes,24,opt,name=Aux13,proto3" json:"Aux13,omitempty"`
	Aux14           *Indicator `protobuf:"bytes,25,opt,name=Aux14,proto3" json:"Aux14,omitempty"`
	SuperChlorinate *Indicator `protobuf:"bytes,26,opt,name=SuperChlorinate,proto3" json:"SuperChlorinate,omitempty"`
}

func (x *StateEvent) Reset() {
	*x = StateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_poolpi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateEvent) ProtoMessage() {}

func (x *StateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_poolpi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateEvent.ProtoReflect.Descriptor instead.
func (*StateEvent) Descriptor() ([]byte, []int) {
	return file_pb_poolpi_proto_rawDescGZIP(), []int{2}
}

func (x *StateEvent) GetHeater1() *Indicator {
	if x != nil {
		return x.Heater1
	}
	return nil
}

func (x *StateEvent) GetValve3() *Indicator {
	if x != nil {
		return x.Valve3
	}
	return nil
}

func (x *StateEvent) GetCheckSystem() *Indicator {
	if x != nil {
		return x.CheckSystem
	}
	return nil
}

func (x *StateEvent) GetPool() *Indicator {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *StateEvent) GetSpa() *Indicator {
	if x != nil {
		return x.Spa
	}
	return nil
}

func (x *StateEvent) GetFilter() *Indicator {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *StateEvent) GetLights() *Indicator {
	if x != nil {
		return x.Lights
	}
	return nil
}

func (x *StateEvent) GetAux1() *Indicator {
	if x != nil {
		return x.Aux1
	}
	return nil
}

func (x *StateEvent) GetAux2() *Indicator {
	if x != nil {
		return x.Aux2
	}
	return nil
}

func (x *StateEvent) GetService() *Indicator {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *StateEvent) GetAux3() *Indicator {
	if x != nil {
		return x.Aux3
	}
	return nil
}

func (x *StateEvent) GetAux4() *Indicator {
	if x != nil {
		return x.Aux4
	}
	return nil
}

func (x *StateEvent) GetAux5() *Indicator {
	if x != nil {
		return x.Aux5
	}
	return nil
}

func (x *StateEvent) GetAux6() *Indicator {
	if x != nil {
		return x.Aux6
	}
	return nil
}

func (x *StateEvent) GetValve4() *Indicator {
	if x != nil {
		return x.Valve4
	}
	return nil
}

func (x *StateEvent) GetSpillover() *Indicator {
	if x != nil {
		return x.Spillover
	}
	return nil
}

func (x *StateEvent) GetSystemOff() *Indicator {
	if x != nil {
		return x.SystemOff
	}
	return nil
}

func (x *StateEvent) GetAux7() *Indicator {
	if x != nil {
		return x.Aux7
	}
	return nil
}

func (x *StateEvent) GetAux8() *Indicator {
	if x != nil {
		return x.Aux8
	}
	return nil
}

func (x *StateEvent) GetAux9() *Indicator {
	if x != nil {
		return x.Aux9
	}
	return nil
}

func (x *StateEvent) GetAux10() *Indicator {
	if x != nil {
		return x.Aux10
	}
	return nil
}

func (x *StateEvent) GetAux11() *Indicator {
	if x != nil {
		return x.Aux11
	}
	return nil
}

func (x *StateEvent) GetAux12() *Indicator {
	if x != nil {
		return x.Aux12
	}
	return nil
}

func (x *StateEvent) GetAux13() *Indicator {
	if x != nil {
		return x.Aux13
	}
	return nil
}

func (x *StateEvent) GetAux14() *Indicator {
	if x != nil {
		return x.Aux14
	}
	return nil
}

func (x *StateEvent) GetSuperChlorinate() *Indicator {
	if x != nil {
		return x.SuperChlorinate
	}
	return nil
}

type Indicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active  bool `protobuf:"varint,1,opt,name=Active,proto3" json:"Active,omitempty"`
	Caution bool `protobuf:"varint,2,opt,name=Caution,proto3" json:"Caution,omitempty"` // Light Blinking
}

func (x *Indicator) Reset() {
	*x = Indicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_poolpi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Indicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Indicator) ProtoMessage() {}

func (x *Indicator) ProtoReflect() protoreflect.Message {
	mi := &file_pb_poolpi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Indicator.ProtoReflect.Descriptor instead.
func (*Indicator) Descriptor() ([]byte, []int) {
	return file_pb_poolpi_proto_rawDescGZIP(), []int{3}
}

func (x *Indicator) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Indicator) GetCaution() bool {
	if x != nil {
		return x.Caution
	}
	return false
}

type MessageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []byte `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Flags   uint32 `protobuf:"varint,2,opt,name=Flags,proto3" json:"Flags,omitempty"` // only lower 8 bits used
}

func (x *MessageEvent) Reset() {
	*x = MessageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_poolpi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEvent) ProtoMessage() {}

func (x *MessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_poolpi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEvent.ProtoReflect.Descriptor instead.
func (*MessageEvent) Descriptor() ([]byte, []int) {
	return file_pb_poolpi_proto_rawDescGZIP(), []int{4}
}

func (x *MessageEvent) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MessageEvent) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type PumpRequestEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeedPercent uint32 `protobuf:"varint,1,opt,name=SpeedPercent,proto3" json:"SpeedPercent,omitempty"`
}

func (x *PumpRequestEvent) Reset() {
	*x = PumpRequestEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_poolpi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PumpRequestEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PumpRequestEvent) ProtoMessage() {}

func (x *PumpRequestEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_poolpi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PumpRequestEvent.ProtoReflect.Descriptor instead.
func (*PumpRequestEvent) Descriptor() ([]byte, []int) {
	return file_pb_poolpi_proto_rawDescGZIP(), []int{5}
}

func (x *PumpRequestEvent) GetSpeedPercent() uint32 {
	if x != nil {
		return x.SpeedPercent
	}
	return 0
}

type PumpStatusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeedPercent uint32 `protobuf:"varint,1,opt,name=SpeedPercent,proto3" json:"SpeedPercent,omitempty"`
	PowerWatts   uint32 `protobuf:"varint,2,opt,name=PowerWatts,proto3" json:"PowerWatts,omitempty"`
	RawData      []byte `protobuf:"bytes,3,opt,name=RawData,proto3" json:"RawData,omitempty"` // Helper for recreating the wire protocol
}

func (x *PumpStatusEvent) Reset() {
	*x = PumpStatusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_poolpi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PumpStatusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PumpStatusEvent) ProtoMessage() {}

func (x *PumpStatusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_poolpi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PumpStatusEvent.ProtoReflect.Descriptor instead.
func (*PumpStatusEvent) Descriptor() ([]byte, []int) {
	return file_pb_poolpi_proto_rawDescGZIP(), []int{6}
}

func (x *PumpStatusEvent) GetSpeedPercent() uint32 {
	if x != nil {
		return x.SpeedPercent
	}
	return 0
}

func (x *PumpStatusEvent) GetPowerWatts() uint32 {
	if x != nil {
		return x.PowerWatts
	}
	return 0
}

func (x *PumpStatusEvent) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

type StateUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *StateEvent `protobuf:"bytes,1,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *StateUpdateEvent) Reset() {
	*x = StateUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_poolpi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateUpdateEvent) ProtoMessage() {}

func (x *StateUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_poolpi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateUpdateEvent.ProtoReflect.Descriptor instead.
func (*StateUpdateEvent) Descriptor() ([]byte, []int) {
	return file_pb_poolpi_proto_rawDescGZIP(), []int{7}
}

func (x *StateUpdateEvent) GetState() *StateEvent {
	if x != nil {
		return x.State
	}
	return nil
}

type MessageUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *MessageEvent `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *MessageUpdateEvent) Reset() {
	*x = MessageUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_poolpi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateEvent) ProtoMessage() {}

func (x *MessageUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_poolpi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateEvent.ProtoReflect.Descriptor instead.
func (*MessageUpdateEvent) Descriptor() ([]byte, []int) {
	return file_pb_poolpi_proto_rawDescGZIP(), []int{8}
}

func (x *MessageUpdateEvent) GetMessage() *MessageEvent {
	if x != nil {
		return x.Message
	}
	return nil
}

type CurrentStateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   *StateEvent   `protobuf:"bytes,1,opt,name=State,proto3" json:"State,omitempty"`
	Message *MessageEvent `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *CurrentStateEvent) Reset() {
	*x = CurrentStateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_poolpi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentStateEvent) ProtoMessage() {}

func (x *CurrentStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_poolpi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentStateEvent.ProtoReflect.Descriptor instead.
func (*CurrentStateEvent) Descriptor() ([]byte, []int) {
	return file_pb_poolpi_proto_rawDescGZIP(), []int{9}
}

func (x *CurrentStateEvent) GetState() *StateEvent {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *CurrentStateEvent) GetMessage() *MessageEvent {
	if x != nil {
		return x.Message
	}
	return nil
}

type UnknownEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type []byte `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *UnknownEvent) Reset() {
	*x = UnknownEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_poolpi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnknownEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownEvent) ProtoMessage() {}

func (x *UnknownEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_poolpi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownEvent.ProtoReflect.Descriptor instead.
func (*UnknownEvent) Descriptor() ([]byte, []int) {
	return file_pb_poolpi_proto_rawDescGZIP(), []int{10}
}

func (x *UnknownEvent) GetType() []byte {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UnknownEvent) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_pb_poolpi_proto protoreflect.FileDescriptor

var file_pb_poolpi_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x62, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x46, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x04, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xc3, 0x03, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x23,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35,
	0x0a, 0x0b, 0x50, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x50, 0x75, 0x6d, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x50, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x75, 0x6d, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x50,
	0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0xa8, 0x07, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x07, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x48, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x31, 0x12, 0x22, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x33, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x06, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x33, 0x12, 0x2c, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x03, 0x53, 0x70, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x03, 0x53, 0x70, 0x61, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x06, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x04,
	0x41, 0x75, 0x78, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x41, 0x75, 0x78, 0x31, 0x12, 0x1e, 0x0a, 0x04,
	0x41, 0x75, 0x78, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x41, 0x75, 0x78, 0x32, 0x12, 0x24, 0x0a, 0x07,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x41, 0x75, 0x78, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x41, 0x75,
	0x78, 0x33, 0x12, 0x1e, 0x0a, 0x04, 0x41, 0x75, 0x78, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x41, 0x75,
	0x78, 0x34, 0x12, 0x1e, 0x0a, 0x04, 0x41, 0x75, 0x78, 0x35, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x41, 0x75,
	0x78, 0x35, 0x12, 0x1e, 0x0a, 0x04, 0x41, 0x75, 0x78, 0x36, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x41, 0x75,
	0x78, 0x36, 0x12, 0x22, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x34, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x56, 0x61, 0x6c, 0x76, 0x65, 0x34, 0x12, 0x28, 0x0a, 0x09, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x09, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x66, 0x66, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x66, 0x66, 0x12, 0x1e, 0x0a, 0x04, 0x41, 0x75,
	0x78, 0x37, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x41, 0x75, 0x78, 0x37, 0x12, 0x1e, 0x0a, 0x04, 0x41, 0x75,
	0x78, 0x38, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x41, 0x75, 0x78, 0x38, 0x12, 0x1e, 0x0a, 0x04, 0x41, 0x75,
	0x78, 0x39, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x41, 0x75, 0x78, 0x39, 0x12, 0x20, 0x0a, 0x05, 0x41, 0x75,
	0x78, 0x31, 0x30, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x41, 0x75, 0x78, 0x31, 0x30, 0x12, 0x20, 0x0a, 0x05,
	0x41, 0x75, 0x78, 0x31, 0x31, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x41, 0x75, 0x78, 0x31, 0x31, 0x12, 0x20,
	0x0a, 0x05, 0x41, 0x75, 0x78, 0x31, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x41, 0x75, 0x78, 0x31, 0x32,
	0x12, 0x20, 0x0a, 0x05, 0x41, 0x75, 0x78, 0x31, 0x33, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x41, 0x75, 0x78,
	0x31, 0x33, 0x12, 0x20, 0x0a, 0x05, 0x41, 0x75, 0x78, 0x31, 0x34, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x41,
	0x75, 0x78, 0x31, 0x34, 0x12, 0x34, 0x0a, 0x0f, 0x53, 0x75, 0x70, 0x65, 0x72, 0x43, 0x68, 0x6c,
	0x6f, 0x72, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x43, 0x68, 0x6c, 0x6f, 0x72, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x3d, 0x0a, 0x09, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x61, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x43, 0x61, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x0c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x36, 0x0a, 0x10, 0x50, 0x75, 0x6d,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x22, 0x6f, 0x0a, 0x0f, 0x50, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x57, 0x61, 0x74, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x57, 0x61, 0x74, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x35, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3d, 0x0a, 0x12, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x36, 0x0a, 0x0c, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x2a, 0xdf, 0x01, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x4d, 0x65, 0x6e, 0x75, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x6c,
	0x75, 0x73, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x70, 0x61, 0x10,
	0x07, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x08, 0x12, 0x0a, 0x0a,
	0x06, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75, 0x78,
	0x31, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75, 0x78, 0x32, 0x10, 0x0b, 0x12, 0x08, 0x0a,
	0x04, 0x41, 0x75, 0x78, 0x33, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75, 0x78, 0x34, 0x10,
	0x0d, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75, 0x78, 0x35, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x41,
	0x75, 0x78, 0x36, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75, 0x78, 0x37, 0x10, 0x10, 0x12,
	0x0a, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x33, 0x10, 0x11, 0x12, 0x0a, 0x0a, 0x06, 0x56,
	0x61, 0x6c, 0x76, 0x65, 0x34, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x10, 0x13, 0x2a, 0x30, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x69, 0x72, 0x65, 0x6c,
	0x65, 0x73, 0x73, 0x10, 0x02, 0x32, 0x29, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x21, 0x0a,
	0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x09, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x1a, 0x06, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x42, 0x1c, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x79, 0x62, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x69, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_poolpi_proto_rawDescOnce sync.Once
	file_pb_poolpi_proto_rawDescData = file_pb_poolpi_proto_rawDesc
)

func file_pb_poolpi_proto_rawDescGZIP() []byte {
	file_pb_poolpi_proto_rawDescOnce.Do(func() {
		file_pb_poolpi_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_poolpi_proto_rawDescData)
	})
	return file_pb_poolpi_proto_rawDescData
}

var file_pb_poolpi_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pb_poolpi_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pb_poolpi_proto_goTypes = []interface{}{
	(Key)(0),                   // 0: Key
	(KeySource)(0),             // 1: KeySource
	(*KeyEvent)(nil),           // 2: KeyEvent
	(*Event)(nil),              // 3: Event
	(*StateEvent)(nil),         // 4: StateEvent
	(*Indicator)(nil),          // 5: Indicator
	(*MessageEvent)(nil),       // 6: MessageEvent
	(*PumpRequestEvent)(nil),   // 7: PumpRequestEvent
	(*PumpStatusEvent)(nil),    // 8: PumpStatusEvent
	(*StateUpdateEvent)(nil),   // 9: StateUpdateEvent
	(*MessageUpdateEvent)(nil), // 10: MessageUpdateEvent
	(*CurrentStateEvent)(nil),  // 11: CurrentStateEvent
	(*UnknownEvent)(nil),       // 12: UnknownEvent
}
var file_pb_poolpi_proto_depIdxs = []int32{
	0,  // 0: KeyEvent.Key:type_name -> Key
	1,  // 1: KeyEvent.Source:type_name -> KeySource
	12, // 2: Event.Unknown:type_name -> UnknownEvent
	4,  // 3: Event.State:type_name -> StateEvent
	6,  // 4: Event.Message:type_name -> MessageEvent
	7,  // 5: Event.PumpRequest:type_name -> PumpRequestEvent
	8,  // 6: Event.PumpStatus:type_name -> PumpStatusEvent
	9,  // 7: Event.StateUpdate:type_name -> StateUpdateEvent
	10, // 8: Event.MessageUpdate:type_name -> MessageUpdateEvent
	11, // 9: Event.CurrentState:type_name -> CurrentStateEvent
	2,  // 10: Event.Key:type_name -> KeyEvent
	5,  // 11: StateEvent.Heater1:type_name -> Indicator
	5,  // 12: StateEvent.Valve3:type_name -> Indicator
	5,  // 13: StateEvent.CheckSystem:type_name -> Indicator
	5,  // 14: StateEvent.Pool:type_name -> Indicator
	5,  // 15: StateEvent.Spa:type_name -> Indicator
	5,  // 16: StateEvent.Filter:type_name -> Indicator
	5,  // 17: StateEvent.Lights:type_name -> Indicator
	5,  // 18: StateEvent.Aux1:type_name -> Indicator
	5,  // 19: StateEvent.Aux2:type_name -> Indicator
	5,  // 20: StateEvent.Service:type_name -> Indicator
	5,  // 21: StateEvent.Aux3:type_name -> Indicator
	5,  // 22: StateEvent.Aux4:type_name -> Indicator
	5,  // 23: StateEvent.Aux5:type_name -> Indicator
	5,  // 24: StateEvent.Aux6:type_name -> Indicator
	5,  // 25: StateEvent.Valve4:type_name -> Indicator
	5,  // 26: StateEvent.Spillover:type_name -> Indicator
	5,  // 27: StateEvent.SystemOff:type_name -> Indicator
	5,  // 28: StateEvent.Aux7:type_name -> Indicator
	5,  // 29: StateEvent.Aux8:type_name -> Indicator
	5,  // 30: StateEvent.Aux9:type_name -> Indicator
	5,  // 31: StateEvent.Aux10:type_name -> Indicator
	5,  // 32: StateEvent.Aux11:type_name -> Indicator
	5,  // 33: StateEvent.Aux12:type_name -> Indicator
	5,  // 34: StateEvent.Aux13:type_name -> Indicator
	5,  // 35: StateEvent.Aux14:type_name -> Indicator
	5,  // 36: StateEvent.SuperChlorinate:type_name -> Indicator
	4,  // 37: StateUpdateEvent.State:type_name -> StateEvent
	6,  // 38: MessageUpdateEvent.Message:type_name -> MessageEvent
	4,  // 39: CurrentStateEvent.State:type_name -> StateEvent
	6,  // 40: CurrentStateEvent.Message:type_name -> MessageEvent
	2,  // 41: Pool.Events:input_type -> KeyEvent
	3,  // 42: Pool.Events:output_type -> Event
	42, // [42:43] is the sub-list for method output_type
	41, // [41:42] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_pb_poolpi_proto_init() }
func file_pb_poolpi_proto_init() {
	if File_pb_poolpi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_poolpi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_poolpi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_poolpi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_poolpi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Indicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_poolpi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_poolpi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PumpRequestEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_poolpi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PumpStatusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_poolpi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_poolpi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_poolpi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentStateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_poolpi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnknownEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pb_poolpi_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Event_Unknown)(nil),
		(*Event_State)(nil),
		(*Event_Message)(nil),
		(*Event_PumpRequest)(nil),
		(*Event_PumpStatus)(nil),
		(*Event_StateUpdate)(nil),
		(*Event_MessageUpdate)(nil),
		(*Event_CurrentState)(nil),
		(*Event_Key)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_poolpi_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_poolpi_proto_goTypes,
		DependencyIndexes: file_pb_poolpi_proto_depIdxs,
		EnumInfos:         file_pb_poolpi_proto_enumTypes,
		MessageInfos:      file_pb_poolpi_proto_msgTypes,
	}.Build()
	File_pb_poolpi_proto = out.File
	file_pb_poolpi_proto_rawDesc = nil
	file_pb_poolpi_proto_goTypes = nil
	file_pb_poolpi_proto_depIdxs = nil
}

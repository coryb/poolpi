// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	MonitorState(ctx context.Context, in *MonitorStateRequest, opts ...grpc.CallOption) (Controller_MonitorStateClient, error)
	Messages(ctx context.Context, in *MessagesRequest, opts ...grpc.CallOption) (Controller_MessagesClient, error)
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) MonitorState(ctx context.Context, in *MonitorStateRequest, opts ...grpc.CallOption) (Controller_MonitorStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Controller_ServiceDesc.Streams[0], "/Controller/MonitorState", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerMonitorStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_MonitorStateClient interface {
	Recv() (*MonitorStateResponse, error)
	grpc.ClientStream
}

type controllerMonitorStateClient struct {
	grpc.ClientStream
}

func (x *controllerMonitorStateClient) Recv() (*MonitorStateResponse, error) {
	m := new(MonitorStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) Messages(ctx context.Context, in *MessagesRequest, opts ...grpc.CallOption) (Controller_MessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Controller_ServiceDesc.Streams[1], "/Controller/Messages", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_MessagesClient interface {
	Recv() (*MessagesResponse, error)
	grpc.ClientStream
}

type controllerMessagesClient struct {
	grpc.ClientStream
}

func (x *controllerMessagesClient) Recv() (*MessagesResponse, error) {
	m := new(MessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/Controller/Event", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
type ControllerServer interface {
	MonitorState(*MonitorStateRequest, Controller_MonitorStateServer) error
	Messages(*MessagesRequest, Controller_MessagesServer) error
	Event(context.Context, *EventRequest) (*EventResponse, error)
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) MonitorState(*MonitorStateRequest, Controller_MonitorStateServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorState not implemented")
}
func (UnimplementedControllerServer) Messages(*MessagesRequest, Controller_MessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method Messages not implemented")
}
func (UnimplementedControllerServer) Event(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_MonitorState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).MonitorState(m, &controllerMonitorStateServer{stream})
}

type Controller_MonitorStateServer interface {
	Send(*MonitorStateResponse) error
	grpc.ServerStream
}

type controllerMonitorStateServer struct {
	grpc.ServerStream
}

func (x *controllerMonitorStateServer) Send(m *MonitorStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_Messages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).Messages(m, &controllerMessagesServer{stream})
}

type Controller_MessagesServer interface {
	Send(*MessagesResponse) error
	grpc.ServerStream
}

type controllerMessagesServer struct {
	grpc.ServerStream
}

func (x *controllerMessagesServer) Send(m *MessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/Event",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Event",
			Handler:    _Controller_Event_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorState",
			Handler:       _Controller_MonitorState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Messages",
			Handler:       _Controller_Messages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/poolpi.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PoolClient is the client API for Pool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoolClient interface {
	// rpc MonitorState(MonitorStateRequest) returns (stream MonitorStateResponse) {}
	// rpc Messages(MessagesRequest) returns (stream MessagesResponse) {}
	Events(ctx context.Context, opts ...grpc.CallOption) (Pool_EventsClient, error)
}

type poolClient struct {
	cc grpc.ClientConnInterface
}

func NewPoolClient(cc grpc.ClientConnInterface) PoolClient {
	return &poolClient{cc}
}

func (c *poolClient) Events(ctx context.Context, opts ...grpc.CallOption) (Pool_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pool_ServiceDesc.Streams[0], "/Pool/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &poolEventsClient{stream}
	return x, nil
}

type Pool_EventsClient interface {
	Send(*KeyEvent) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type poolEventsClient struct {
	grpc.ClientStream
}

func (x *poolEventsClient) Send(m *KeyEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *poolEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PoolServer is the server API for Pool service.
// All implementations must embed UnimplementedPoolServer
// for forward compatibility
type PoolServer interface {
	// rpc MonitorState(MonitorStateRequest) returns (stream MonitorStateResponse) {}
	// rpc Messages(MessagesRequest) returns (stream MessagesResponse) {}
	Events(Pool_EventsServer) error
	mustEmbedUnimplementedPoolServer()
}

// UnimplementedPoolServer must be embedded to have forward compatible implementations.
type UnimplementedPoolServer struct {
}

func (UnimplementedPoolServer) Events(Pool_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedPoolServer) mustEmbedUnimplementedPoolServer() {}

// UnsafePoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoolServer will
// result in compilation errors.
type UnsafePoolServer interface {
	mustEmbedUnimplementedPoolServer()
}

func RegisterPoolServer(s grpc.ServiceRegistrar, srv PoolServer) {
	s.RegisterService(&Pool_ServiceDesc, srv)
}

func _Pool_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PoolServer).Events(&poolEventsServer{stream})
}

type Pool_EventsServer interface {
	Send(*Event) error
	Recv() (*KeyEvent, error)
	grpc.ServerStream
}

type poolEventsServer struct {
	grpc.ServerStream
}

func (x *poolEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *poolEventsServer) Recv() (*KeyEvent, error) {
	m := new(KeyEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Pool_ServiceDesc is the grpc.ServiceDesc for Pool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Pool",
	HandlerType: (*PoolServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _Pool_Events_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/poolpi.proto",
}

syntax = "proto3";
option go_package = "github.com/coryb/poolpi/pb";

service Pool {
    rpc Events(stream KeyEvent) returns (stream Event) {}
}

enum Key {
    None    = 0;
    Right   = 1;
    Menu    = 2;
    Left    = 3;
    Service = 4;
    Minus   = 5;
    Plus    = 6;
    PoolSpa = 7;
    Filter  = 8;
    Lights  = 9;
    Aux1    = 10;
    Aux2    = 11;
    Aux3    = 12;
    Aux4    = 13;
    Aux5    = 14;
    Aux6    = 15;
    Aux7    = 16;
    Valve3  = 17;
    Valve4  = 18;
    Heater  = 19;
};

enum KeySource {
    Remote = 0;
    Local = 1;
    Wireless = 2;
}

message KeyEvent {
    Key Key = 1;
    KeySource Source = 2;
}

message Event {
    oneof Event {
        UnknownEvent Unknown = 1;
        StateEvent State =  2;
        MessageEvent Message = 3;
        PumpRequestEvent PumpRequest = 4;
        PumpStatusEvent PumpStatus = 5;
        StateUpdateEvent StateUpdate = 6;
        MessageUpdateEvent MessageUpdate = 7;
        CurrentStateEvent CurrentState = 8;
        KeyEvent Key = 9;
    }
}

message StateEvent {
    Indicator Heater1 = 1;
    Indicator Valve3 = 2;
    Indicator CheckSystem = 3;
    Indicator Pool = 4;
    Indicator Spa = 5;
    Indicator Filter = 6;
    Indicator Lights = 7;
    Indicator Aux1 = 8;
    Indicator Aux2 = 9;
    Indicator Service = 10;
    Indicator Aux3 = 11;
    Indicator Aux4 = 12;
    Indicator Aux5 = 13;
    Indicator Aux6 = 14;
    Indicator Valve4 = 15;
    Indicator Spillover = 16;
    Indicator SystemOff = 17;
    Indicator Aux7 = 18;
    Indicator Aux8 = 19;
    Indicator Aux9 = 20;
    Indicator Aux10 = 21;
    Indicator Aux11 = 22;
    Indicator Aux12 = 23;
    Indicator Aux13 = 24;
    Indicator Aux14 = 25;
    Indicator SuperChlorinate = 26;
}

message Indicator {
    bool Active = 1;
    bool Caution = 2; // Light Blinking
}

message MessageEvent {
    bytes Message = 1;
    uint32 Flags = 2; // only lower 8 bits used
}

message PumpRequestEvent {
    uint32 SpeedPercent = 1;
}

message PumpStatusEvent {
    uint32 SpeedPercent = 1;
    uint32 PowerWatts = 2;
    bytes RawData = 3; // Helper for recreating the wire protocol
}

message StateUpdateEvent {
    StateEvent State = 1;
}

message MessageUpdateEvent {
    MessageEvent Message = 2;
}

message CurrentStateEvent {
    StateEvent State = 1;
    MessageEvent Message = 2;
}

message UnknownEvent {
    bytes Type = 1;
    bytes Data = 2;
}

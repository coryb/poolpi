################################################################################
# Targets
################################################################################

fs protoc() {
	protocOutput
	download "."
}

fs lint() {
	image "golangci/golangci-lint:v1.38.0"
	run "golangci-lint run ./..." with option {
		romount "/src" lintSrc
		goCache "/root"
	}
}

fs console() {
	buildOutput "console" "./cmd/console"
	download "."
}

################################################################################
# Build Logic
################################################################################

fs _runProtoc() {
	image "golang:1.16-alpine"
	run "apk add -U protoc"
	run "go install google.golang.org/grpc/cmd/protoc-gen-go-grpc google.golang.org/protobuf/cmd/protoc-gen-go" with option {
		romount "/src" modSrc
		goCache "/root"
	}
	run "protoc --go_out=/output --go_opt=paths=source_relative --go-grpc_out=/output --go-grpc_opt=paths=source_relative ./pb/poolpi.proto" with option {
		romount "/src" protoSrc
		goCache "/root"
		mount scratch "/output" as protocOutput
	}
}

fs _goBuild(string name, string pkg) {
	image "golang:1.16-alpine"
	run <<-EOM
		go build -a -ldflags '-s -w -extldflags "-static"' -o /output/${name} ${pkg}
	EOM	with option {
		env "CGO_ENABLED" "0"
		env "GOOS" "linux"
		env "GOARCH" "arm"
		env "GOARM" "7"
		romount "/src" goSrc
		goCache "/root"
		mount scratch "/output" as buildOutput
	}
}

################################################################################
# Common Sources
################################################################################

fs goSrc() {
	local "." with option {
		includePatterns "**/*.go"
		excludePatterns "vendor"
	}
	copy modSrc "/" "/"
}

fs lintSrc() {
	goSrc
	copy local(".golangci.yml") "/" "/"
}

fs modSrc() {
	local "." with includePatterns("go.mod", "go.sum")
}

fs  protoSrc() {
	local "." with includePatterns("**/*.proto")
}

################################################################################
# Common Options
################################################################################

option::run romount(string d, fs src) {
	dir d
	mount src d with readonly
}

option::run goCache(string homedir) {
	env "GOBIN" "/usr/bin"

	env "GOCACHE" "${homedir}/.cache/go-build"
    mount scratch "${homedir}/.cache/go-build" with cache("poolpi/go-build${homedir}", "private")
	
	env "GOMODCACHE" "/go/pkg/mod"
    mount scratch "/go/pkg/mod" with cache("poolpi/go-mod${homedir}", "private")
}
